- description: Have at least a minimum number (at least 6) of commits in repository
  check: CountCommits
  options:
    count: 6
- description: Function verification tests pass (checks that all 7 required functions are defined with correct names and parameters)
  check: ExecuteCommand
  options:
    command: python3 tests/verify_functions.py
- description: Comprehensive function tests pass (validates complete Simon game logic, LED patterns, button input, and scoring functionality)
  check: ExecuteCommand
  options:
    command: python3 tests/test_functions.py
- description: Isolated function tests pass (tests individual functions independently to ensure each works correctly with mock hardware)
  check: ExecuteCommand
  options:
    command: python3 tests/test_isolated.py
- src/main.py:
    - description: Check file exists
      check: ConfirmFileExists
    - description: Use button value method .value() (at least 4 times)
      check: MatchFileFragment
      options:
        fragment: .value()
        count: 4
        exact: false
    - description: Create LED pin objects with Pin.OUT (at least 3 times)
      check: MatchFileFragment
      options:
        fragment: Pin.OUT
        count: 3
        exact: false
    - description: Use LED on method .on() (at least 6 times)
      check: MatchFileFragment
      options:
        fragment: .on()
        count: 6
        exact: false
    - description: Use LED off method .off() (at least 8 times)
      check: MatchFileFragment
      options:
        fragment: .off()
        count: 8
        exact: false
    - description: Use return statements in functions (at least 6 times)
      check: MatchFileFragment
      options:
        fragment: return
        count: 6
        exact: false
    - description: Use sleep calls for timing time.sleep( (at least 8 times)
      check: MatchFileFragment
      options:
        fragment: time.sleep(
        count: 8
        exact: false
    - description: Use print statements for output print( (at least 25 times)
      check: MatchFileFragment
      options:
        fragment: print(
        count: 25
        exact: false
    - description: Use input for user interaction input( (at least 2 times)
      check: MatchFileFragment
      options:
        fragment: input(
        count: 2
        exact: false
    - description: Use for loop iteration (at least 3 times)
      check: MatchFileFragment
      options:
        fragment: 'for '
        count: 3
        exact: false
    - description: Use range function for loops range( (at least 2 times)
      check: MatchFileFragment
      options:
        fragment: range(
        count: 2
        exact: false
    - description: Use if statements for logic (at least 13 times)
      check: MatchFileFragment
      options:
        fragment: 'if '
        count: 13
        exact: false
    - description: Use while loops for control (at least 4 times)
      check: MatchFileFragment
      options:
        fragment: 'while '
        count: 4
        exact: false
    - description: Use elif statements for multiple conditions (at least 1 time)
      check: MatchFileFragment
      options:
        fragment: elif
        count: 1
        exact: false
    - description: Use else statements for alternative paths (at least 3 times)
      check: MatchFileFragment
      options:
        fragment: 'else:'
        count: 3
        exact: false
    - description: Use len() function for list operations (at least 1 time)
      check: MatchFileFragment
      options:
        fragment: len(
        count: 1
        exact: false
    - description: Use mathematical operations for scoring (at least 2 times)
      check: MatchFileFragment
      options:
        fragment: ' * '
        count: 2
        exact: false
    - description: Use random module for sequence generation (at least 1 time)
      check: MatchFileFragment
      options:
        fragment: random.
        count: 1
        exact: false
    - description: Use comparison operations for game logic (at least 2 times)
      check: MatchFileFragment
      options:
        fragment: ' == '
        count: 3
        exact: false
    - description: Complete all TODOs (no TODO comments remaining in main.py)
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: false

- writing/reflection.md:
    - description: Check reflection exists
      check: ConfirmFileExists
    - description: Write sufficient words (at least 200 words)
      check: CountFileWords
      options:
        count: 200
    - description: Use markdown lists using - (at least 12 list items total)
      check: MatchFileFragment
      options:
        fragment: '- '
        count: 6
        exact: false